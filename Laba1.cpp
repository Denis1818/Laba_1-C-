// ЗАДАНИЕ 1 //

// 2. Сумма знаков.
// Дана сигнатура функции: int sumLastNums (int x);
// Необходимо реализовать функцию таким образом, чтобы она возвращала
// результат сложения двух последних знаков числах, предполагая, что знаков в
// числе не менее двух. Подсказки:
// int x=123%10; // х будет иметь значение 3
// int у=123/10; // у будет иметь значение 12
// Пример:
// x=4568
// результат: 14

#include <iostream>
#include <locale>
using namespace std;

// Функция для сложения двух последних цифр числа
int sumLastNums(int x) {
    int last = x % 10;            // последняя цифра
    int predLast = (x / 10) % 10; // предпоследняя цифра
    return last + predLast;
}

int main() {
    setlocale(LC_ALL, "Russian"); // включаем поддержку русского языка

    int number;

    cout << "Введите число (не меньше двух цифр): ";
    cin >> number;

    if (number < 10) {
        cout << "Ошибка: число должно содержать минимум две цифры!" << endl;
        return 1; // завершение программы с кодом ошибки
    }

    cout << "Сумма двух последних цифр числа: "
        << sumLastNums(number) << endl;

    return 0;
}


// 4. Есть ли позитив.
// Дана сигнатура функции: bool isPositive (intx);
// Необходимо реализовать функцию таким образом, чтобы она принимала число
// x и возвращала true, если оно положительное.
// Пример 1:
// x=3
// результат: true
// Пример 2:
// x=-5
// результат: false

#include <iostream>
#include <locale>
using namespace std;

// Функция проверяет, является ли число положительным
bool isPositive(int x) {
    return x > 0;  // возвращает true, если x > 0, иначе false
}

int main() {
    setlocale(LC_ALL, "Russian"); // включаем поддержку русского языка

    int x;

    // Просим пользователя ввести число
    cout << "Введите число: ";
    cin >> x;

    // Проверяем число и выводим результат через if
    if (isPositive(x)) {
        cout << "true" << endl;   // число положительное
    }
    else {
        cout << "false" << endl;  // число отрицательное или равно нулю
    }

    return 0;
}


// 6. Большая буква.
// Дана сигнатура функции: bool isUpperCase (char x);
// Необходимо реализовать функцию таким образом, чтобы она принимала
// символ x и возвращала true, если это большая буква в диапазоне от ‘A’ до ‘Z’.
// Пример 1:
// x=’D’
// результат: true
// Пример 2:
// x=’q’
// результат: false

#include <iostream>
#include <locale>
using namespace std;

// Функция проверяет, является ли символ большой буквой от 'A' до 'Z'
bool isUpperCase(char x) {
    return x >= 'A' && x <= 'Z';  // true, если x в диапазоне 'A'-'Z'
}

int main() {
    setlocale(LC_ALL, "Russian"); // включаем поддержку русского языка

    char c;

    // Просим пользователя ввести символ
    cout << "Введите символ: ";
    cin >> c;

    // Проверяем символ и выводим результат через if
    if (isUpperCase(c)) {
        cout << "true" << endl;   // символ является большой буквой
    }
    else {
        cout << "false" << endl;  // символ не является большой буквой
    }

    return 0;
}


// 8. Делитель.
// Дана сигнатура функции: bool isDivisor (int a, int b);
// Необходимо реализовать функцию таким образом, чтобы она возвращала true,
// если любое из принятых чисел делит другое нацело.
// Пример 1:
// a=3 b=6
// результат: true
// Пример 2:
// a=2 b=15
// результат: false

#include <iostream>
#include <locale>
using namespace std;

// Функция проверяет, делит ли одно число другое нацело
bool isDivisor(int a, int b) {
    if (a == 0 || b == 0) return false; // деление на ноль невозможно
    return (a % b == 0) || (b % a == 0); // true, если a делит b или b делит a
}

int main() {
    setlocale(LC_ALL, "Russian"); // включаем поддержку русского языка

    int a, b;

    // Ввод двух чисел пользователем
    cout << "Введите два числа через пробел: ";
    cin >> a >> b;

    // Проверяем делимость и выводим результат через if
    if (isDivisor(a, b)) {
        cout << "true" << endl;   // одно число делит другое
    }
    else {
        cout << "false" << endl;  // ни одно число не делит другое
    }

    return 0;
}



// 10 Многократный вызов.
// Дана сигнатура функции: int lastNumSum(int a, int b)
// Необходимо реализовать функцию таким образом, чтобы она считала сумму
// цифр двух чисел из разряда единиц. Выполните с его помощью
// последовательное сложение пяти чисел и результат выведите на экран.
// Постарайтесь выполнить задачу, используя минимально возможное
// количество вспомогательных переменных.
// Пример:
// 5+11 это 6
// 6+123 это 9
// 9+14 это 13
// 13+1 это 4
// Итого 4

#include <iostream>
#include <locale>
using namespace std;

// Функция считает сумму цифр единиц двух чисел
int lastNumSum(int a, int b) {
    return (a % 10) + (b % 10);  // сумма последних цифр
}

int main() {
    setlocale(LC_ALL, "Russian"); // включаем поддержку русского языка

    int result = 0, num;  // result будет хранить накопленный результат

    cout << "Введите 5 чисел:" << endl;
    for (int i = 0; i < 5; i++) {
        cin >> num;
        result = lastNumSum(result, num);  // многократный вызов функции
    }

    cout << "Итого: " << result << endl;

    return 0;
}


// ЗАДАНИЕ 2 //
// 2. Безопасное деление.
// Дана сигнатура функции: double safeDiv (int x, int y);
// Необходимо реализовать функцию таким образом, чтобы она возвращала
// деление x на y, и при этом гарантировала, что не будет выкинута ошибка
// деления на 0. При делении на 0 следует вернуть из функции число 0. Подсказка:
// смотри ограничения на операции типов данных.
// Пример 1:
// x=5 y=0
// результат: 0
// Пример 2:
// x=8 y=2
// результат: 4

#include <iostream>
#include <locale>
using namespace std;

// Функция безопасного деления
double safeDiv(int x, int y) {
    if (y == 0) {
        return 0;  // защита от деления на 0
    }
    return static_cast<double>(x) / y;  // обычное деление
}

int main() {
    setlocale(LC_ALL, "Russian"); // включаем поддержку русского языка

    int a, b;
    cout << "Введите два числа (x y): ";
    cin >> a >> b;

    double result = safeDiv(a, b);

    cout << "Результат: " << result << endl;

    return 0;
}


// 4. Строка сравнения.
// Дана сигнатура функции: String makeDecision (int x, int y);
// Необходимо реализовать функцию таким образом, чтобы она возвращала
// строку, которая включает два принятых функцией числа и корректно
// выставленный знак операции сравнения (больше, меньше, или равно).
// Пример 1:
// x=5 y=7
// результат: “5< 7”
// Пример 2:
// x=8 y=-1
// результат: “8 >-1”
// Пример 3:
// x=4 y=4
// результат: “4==4”

#include <iostream>
#include <string>
#include <locale>
    using namespace std;

    // Функция формирует строку с результатом сравнения двух чисел
    string makeDecision(int x, int y) {
        if (x > y) {
            return to_string(x) + " >" + to_string(y);
        }
        else if (x < y) {
            return to_string(x) + "< " + to_string(y);
        }
        else {
            return to_string(x) + "==" + to_string(y);
        }
    }

    int main() {
        setlocale(LC_ALL, "Russian"); // включаем поддержку русского языка

        int x, y;

        // Ввод двух чисел пользователем
        cout << "Введите два числа через пробел: ";
        cin >> x >> y;

        // Вывод результата сравнения
        cout << makeDecision(x, y) << endl;

        return 0;
    }


// 6. Тройная сумма.
// Дана сигнатура функции: bool sum3 (int x, int y, int z);
// Необходимо реализовать функцию таким образом, чтобы она возвращала true,
// если два любых числа (из трех принятых) можно сложить так, чтобы получить
// третье.
// Пример 1:
// x=5 y=7 z=2
// результат: true
// Пример 2:
// x=8 y=-1 z=4
// результат: false

#include <iostream>
#include <locale>
using namespace std;

// Функция проверяет, можно ли сложить два числа, чтобы получить третье
bool sumTrio(int x, int y, int z) {
    if (x + y == z) return true;  // x + y равно z
    if (x + z == y) return true;  // x + z равно y
    if (y + z == x) return true;  // y + z равно x
    return false;                 // ни одно условие не выполнено
}

int main() {
    setlocale(LC_ALL, "Russian"); // включаем поддержку русского языка

    int x, y, z;

    // Ввод трёх чисел
    cout << "Введите три числа через пробел: ";
    cin >> x >> y >> z;

    // Проверка условия и вывод результата
    if (sumTrio(x, y, z)) {
        cout << "true" << endl;   // условие выполнено
    }
    else {
        cout << "false" << endl;  // условие не выполнено
    }

    return 0;
}


// 8. Возраст.
// Дана сигнатура функции: String age (int x);
// Необходимо реализовать функцию таким образом, чтобы она возвращала
// строку, в которой сначала будет число х, а затем одно из слов:
// • год
// • года
// • лет
// Слово “год” добавляется, если число х заканчивается на 1, кроме числа 11.
// Слово “года” добавляется, если число х заканчивается на 2, 3 или 4, кроме чисел
// 12, 13, 14.
// Слово “лет”добавляется во всех остальных случаях.
// Подсказка: оператор % позволяет получить остаток от деления.
// Пример 1:
// x=5
// результат: “5 лет”
// Пример 2:
// x=31
// результат: “31 год”
// Пример 3:
// x=44
// результат: “44 года”

#include <iostream>
#include <string>
#include <locale>  
using namespace std;

// Функция возвращает строку с числом и правильным словом для возраста
string age(int x) {
    int lastDigit = x % 10;       // получаем последнюю цифру числа
    int lastTwoDigits = x % 100;  // получаем последние две цифры числа

    string word;  // строка для хранения правильного окончания слова

    // Проверяем правила выбора окончания
    if (lastDigit == 1 && lastTwoDigits != 11) {
        word = "год";  // если число оканчивается на 1, кроме 11
    }
    else if ((lastDigit >= 2 && lastDigit <= 4) &&
        !(lastTwoDigits >= 12 && lastTwoDigits <= 14)) {
        word = "года";  // если число оканчивается на 2-4, кроме 12-14
    }
    else {
        word = "лет";  // во всех остальных случаях
    }

    // Объединяем число и слово и возвращаем результат
    return to_string(x) + " " + word;
}

int main() {
    setlocale(LC_ALL, "Russian"); // Включаем поддержку русского языка в консоли

    int x;  
    cout << "Введите возраст: ";
    cin >> x;  // считываем число с клавиатуры

    // Выводим результат работы функции age
    cout << age(x) << endl;

    return 0;  
}


// 10. Вывод дней недели.
// Дана сигнатура функции: void printDays (int x);
// В качестве параметра функция принимает число x, обозначаются день недели.
// Необходимо реализовать функцию таким образом, чтобы она выводила на
// экран название переданного в него дня и всех последующих до конца недели
// дней. Если в качестве параметра передан не день (число, не в диапазоне от 1 от
// 7), то выводится текст “это не день недели”. Первый день понедельник,
// последний – воскресенье. Вместо if в данной задаче используйте switch.
// Пример 1:
// x=4
// результат:
// четверг
// пятница
// суббота
// воскресенье
// Пример 2:
// x=18
// результат:
// это не день недели

#include <iostream>
#include <locale>
using namespace std;

// Функция выводит день недели и все последующие до воскресенья
void printDays(int x) {
    switch (x) {
    case 1:
        cout << "понедельник" << endl;
        [[fallthrough]];
    case 2:
        cout << "вторник" << endl;
        [[fallthrough]];
    case 3:
        cout << "среда" << endl;
        [[fallthrough]];
    case 4:
        cout << "четверг" << endl;
        [[fallthrough]];
    case 5:
        cout << "пятница" << endl;
        [[fallthrough]];
    case 6:
        cout << "суббота" << endl;
        [[fallthrough]];
    case 7:
        cout << "воскресенье" << endl;
        break;
    default:
        cout << "это не день недели" << endl;
    }
}

int main() {
    setlocale(LC_ALL, "Russian"); // Включаем поддержку русского языка в консоли

    int x;
    cout << "Введите число (1-7): ";
    cin >> x;

    printDays(x);  // вызов функции

    return 0;
}


// ЗАДАНИЕ 3 //
// 2. Числа наоборот.
// Дана сигнатура функции: String reverseListNums (int x);
// Необходимо реализовать функцию таким образом, чтобы она возвращала
// строку, в которой будут записаны все числа от x до 0 (включительно).
// Пример:
// x=5
// результат: “5 4 3 2 1 0”

#include <iostream>
#include <string>
#include <locale>
using namespace std;

// Функция возвращает строку с числами от x до 0 (включительно)
string reverseListNums(int x) {
    string result = "";  // создаём пустую строку 

    // Цикл от x до 0, включительно
    for (int i = x; i >= 0; i--) {
        result += to_string(i);  // преобразуем число в строку и добавляем к результату
        if (i != 0) {
            result += " ";       // добавляем пробел между числами, кроме последнего
        }
    }

    return result;  
}

int main() {
    setlocale(LC_ALL, "Russian"); // Включаем поддержку русского языка в консоли

    int x;
    cout << "Введите число: "; 
    cin >> x;                   

    // Вызываем функцию и выводим результат
    cout << reverseListNums(x) << endl;

    return 0;  
}


// 4. Степень числа.
// Дана сигнатура функции: int pow (int x, int y);
// Необходимо реализовать функцию таким образом, чтобы она возвращала
// результат возведения x в степень y.
// Подсказка: для получения степени необходимо умножить единицу на число x,
// и сделать это y раз, т.е. два в третьей степени это 1*2*2*2
// Пример:
// x=2
// y=5
// результат: 32

#include <iostream>
#include <locale> 
using namespace std;

// Функция возводит x в степень y
int pow(int x, int y) {
    int result = 1;  // начинаем с 1
    for (int i = 0; i < y; i++) {
        result *= x;  // умножаем result на x y раз
    }
    return result;
}

int main() {
    setlocale(LC_ALL, "Russian"); // Включаем поддержку русского языка в консоли
    int x, y;

    // Ввод числа и степени
    cout << "Введите число: ";
    cin >> x;
    cout << "Введите степень: ";
    cin >> y;

    // Вывод результата
    cout << "Результат: " << pow(x, y) << endl;

    return 0;
}


// 6. Одинаковость.
// Дана сигнатура функции: bool equalNum (int x);
// Необходимо реализовать функцию таким образом, чтобы она возвращала true,
// если все знаки числа одинаковы, и false в ином случае.
// Подсказки:
// intx=123%10; // х будет иметь значение 3
// intу=123/10; // у будет иметь значение 12
// Пример 1:
// x=1111
// результат: true
// Пример 2:
// x=1211
// результат: false

#include <iostream>
#include <locale>
using namespace std;

// Функция проверяет, одинаковы ли все цифры числа
bool equalNum(int x) {
    int lastDigit = x % 10;  // берём последнюю цифру
    x /= 10;

    while (x != 0) {          // продолжаем, пока есть цифры
        if (x % 10 != lastDigit) return false;  // если цифра отличается — false
        x /= 10;              // убираем последнюю цифру
    }
    return true;               // все цифры одинаковы
}

int main() {
    setlocale(LC_ALL, "Russian"); // Включаем поддержку русского языка в консоли

    int x;
    cout << "Введите число: ";
    cin >> x;

    if (equalNum(x)) {
        cout << "true" << endl;   // все цифры одинаковы
    }
    else {
        cout << "false" << endl;  // есть разные цифры
    }

    return 0;
}


// 8. Левый треугольник.
// Дана сигнатура функции: void leftTriangle (int x);
// Необходимо реализовать функцию таким образом, чтобы она выводила на
// экран треугольник из символов ‘*’ у которого х символов в высоту, а количество
// символов в ряду совпадает с номером строки.
// Пример 1:
// x=2
// результат:
// *
// **
// Пример 2:
// x=4
// результат:
// *
// **
// ***
// ****

#include <iostream>
#include <locale>
using namespace std;

// Функция выводит левый треугольник высотой x
void leftTriangle(int x) {
    for (int i = 1; i <= x; i++) {       // строки от 1 до x
        for (int j = 1; j <= i; j++) {   // количество '*' в строке равно номеру строки
            cout << "*";
        }
        cout << endl;                     // переход на следующую строку
    }
}

int main() {
    setlocale(LC_ALL, "Russian"); // Включаем поддержку русского языка в консоли

    int x;
    cout << "Введите высоту треугольника: ";
    cin >> x;

    leftTriangle(x);  // вызываем функцию для печати треугольника

    return 0;
}


// 10. Угадайка.
// Дана сигнатура функции: void guessGame()
// Необходимо реализовать функцию таким образом, чтобы она генерировала
// случайное число от 0 до 9, далее считывала с консоли введенное пользователем
// число и выводила, угадал ли пользователь то, что было загадано, или нет.
// Функция запускается до тех пор, пока пользователь не угадает число. После
// этого выведите на экран количество попыток, которое потребовалось
// пользователю, чтобы угадать число.
// Пример:
// Введите число от 0 до 9:
// 5
// Вы не угадали, введите число от 0 до 9:
// 9
// Вы угадали!
// Вы отгадали число за 2 попытки
#include <iostream>
#include <locale>
using namespace std;

// Функция угадайки
// target вычисляется через формулу: (seed * 7 + 3) % 10
void guessGame(int seed) {
    int target = (seed * 7 + 3) % 10;  // число, которое нужно угадать (0–9)
    int guess;                          // число, введённое пользователем
    int attempts = 0;                    // счётчик попыток

    // Цикл продолжается, пока пользователь не угадает число
    do {
        cout << "Введите число от 0 до 9: ";
        cin >> guess;        // считываем ввод пользователя
        attempts++;          // увеличиваем количество попыток

        if (guess != target) {
            cout << "Вы не угадали, попробуйте снова." << endl;
        }
    } while (guess != target);  // условие выхода из цикла

    // Если цикл завершён, значит пользователь угадал число
    cout << "Вы угадали!" << endl;
    cout << "Вы отгадали число за " << attempts << " попыток." << endl;
}

int main() {
    setlocale(LC_ALL, "Russian"); // Включаем поддержку русского языка в консоли (для Windows)

    int seed;
    cout << "Введите seed для игры: ";
    cin >> seed;  // пользователь вводит seed

    guessGame(seed);  // запуск игры с заданным seed
    return 0;         // завершение программы
}
