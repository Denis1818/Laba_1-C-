#include <iostream> // используется для ввода и вывода 
#include <locale> //нужна для поддержки русского языка 
#include <string>


// 1 (2. Сумма знаков.)
// Дана сигнатура функции: int sumLastNums (int x);
// Необходимо реализовать функцию таким образом, чтобы она возвращала
// результат сложения двух последних знаков числах, предполагая, что знаков в
// числе не менее двух. Подсказки:
// int x=123%10; // х будет иметь значение 3
// int у=123/10; // у будет иметь значение 12
// Пример:
// x=4568
// результат: 14

// Функция для сложения двух последних цифр числа
int SumLastNums(int x) {
    int last = x % 10;
    int pred_last = (x / 10) % 10;
    return last + pred_last;
}



// 2 (4. Есть ли позитив.)
// Дана сигнатура функции: bool isPositive (intx);
// Необходимо реализовать функцию таким образом, чтобы она принимала число
// x и возвращала true, если оно положительное.
// Пример 1:
// x=3
// результат: true
// Пример 2:
// x=-5
// результат: false

// Функция проверяет, является ли число положительным
bool IsPositive(int x) {
    return x > 0;
}


// 3 (6. Большая буква.)
// Дана сигнатура функции: bool isUpperCase (char x);
// Необходимо реализовать функцию таким образом, чтобы она принимала
// символ x и возвращала true, если это большая буква в диапазоне от ‘A’ до ‘Z’.
// Пример 1:
// x=’D’
// результат: true
// Пример 2:
// x=’q’
// результат: false

// Функция проверяет, является ли символ большой буквой от 'A' до 'Z'
bool IsUpperCase(char x) {
    return x >= 'A' && x <= 'Z';
}


// 4 (8. Делитель.)
// Дана сигнатура функции: bool isDivisor (int a, int b);
// Необходимо реализовать функцию таким образом, чтобы она возвращала true,
// если любое из принятых чисел делит другое нацело.
// Пример 1:
// a=3 b=6
// результат: true
// Пример 2:
// a=2 b=15
// результат: false

// Функция проверяет, делит ли одно число другое нацело
bool IsDivisor(int a, int b) {
    if (a == 0 || b == 0) {
        return false;
    }
    return (a % b == 0) || (b % a == 0);
}



// 5 (10 Многократный вызов.)
// Дана сигнатура функции: int lastNumSum(int a, int b)
// Необходимо реализовать функцию таким образом, чтобы она считала сумму
// цифр двух чисел из разряда единиц. Выполните с его помощью
// последовательное сложение пяти чисел и результат выведите на экран.
// Постарайтесь выполнить задачу, используя минимально возможное
// количество вспомогательных переменных.
// Пример:
// 5+11 это 6
// 6+123 это 9
// 9+14 это 13
// 13+1 это 4
// Итого 4

// Функция считает сумму цифр единиц двух чисел
int LastNumSum(int a, int b) {
    return (a % 10) + (b % 10);
}



// ЗАДАНИЕ 2 //
// 6 (2. Безопасное деление.)
// Дана сигнатура функции: double safeDiv (int x, int y);
// Необходимо реализовать функцию таким образом, чтобы она возвращала
// деление x на y, и при этом гарантировала, что не будет выкинута ошибка
// деления на 0. При делении на 0 следует вернуть из функции число 0. Подсказка:
// смотри ограничения на операции типов данных.
// Пример 1:
// x=5 y=0
// результат: 0
// Пример 2:
// x=8 y=2
// результат: 4


// Функция безопасного деления
double SafeDiv(int x, int y) {
    if (y == 0) {
        return 0.0;
    }
    return static_cast<double>(x) / y;
}
   

// 7 (4. Строка сравнения.)
// Дана сигнатура функции: String makeDecision (int x, int y);
// Необходимо реализовать функцию таким образом, чтобы она возвращала
// строку, которая включает два принятых функцией числа и корректно
// выставленный знак операции сравнения (больше, меньше, или равно).
// Пример 1:
// x=5 y=7
// результат: “5< 7”
// Пример 2:
// x=8 y=-1
// результат: “8 >-1”
// Пример 3:
// x=4 y=4
// результат: “4==4”

    // Функция формирует строку с результатом сравнения двух чисел
std::string MakeDecision(int x, int y) {
    if (x > y) {
        return std::to_string(x) + " > " + std::to_string(y);
    }
    else if (x < y) {
        return std::to_string(x) + " < " + std::to_string(y);
    }
    else {
        return std::to_string(x) + " == " + std::to_string(y);
    }
}
   


// 8 (6. Тройная сумма.)
// Дана сигнатура функции: bool sum3 (int x, int y, int z);
// Необходимо реализовать функцию таким образом, чтобы она возвращала true,
// если два любых числа (из трех принятых) можно сложить так, чтобы получить
// третье.
// Пример 1:
// x=5 y=7 z=2
// результат: true
// Пример 2:
// x=8 y=-1 z=4
// результат: false

// Функция проверяет, можно ли сложить два числа, чтобы получить третье
bool SumTrio(int x, int y, int z) {
    if (x + y == z)
    {
        return true;
    }  
    if (x + z == y) { 
        return true; 
    }  
    if (y + z == x) { 
        return true; 
    }  
    {
        return false;
    }
}


// 9 (8. Возраст.)
// Дана сигнатура функции: String age (int x);
// Необходимо реализовать функцию таким образом, чтобы она возвращала
// строку, в которой сначала будет число х, а затем одно из слов:
// • год
// • года
// • лет
// Слово “год” добавляется, если число х заканчивается на 1, кроме числа 11.
// Слово “года” добавляется, если число х заканчивается на 2, 3 или 4, кроме чисел
// 12, 13, 14.
// Слово “лет”добавляется во всех остальных случаях.
// Подсказка: оператор % позволяет получить остаток от деления.
// Пример 1:
// x=5
// результат: “5 лет”
// Пример 2:
// x=31
// результат: “31 год”
// Пример 3:
// x=44
// результат: “44 года”


// Функция возвращает строку с числом и правильным словом для возраста
std::string Age(int x) {
    int last_digit = x % 10;
    int last_two = x % 100;
    std::string word;

    if (last_digit == 1 && last_two != 11) {
        word = "год";
    }
    else if ((last_digit >= 2 && last_digit <= 4) &&
        !(last_two >= 12 && last_two <= 14)) {
        word = "года";
    }
    else {
        word = "лет";
    }

    return std::to_string(x) + " " + word;
}


// 10 (10. Вывод дней недели.)
// Дана сигнатура функции: void printDays (int x);
// В качестве параметра функция принимает число x, обозначаются день недели.
// Необходимо реализовать функцию таким образом, чтобы она выводила на
// экран название переданного в него дня и всех последующих до конца недели
// дней. Если в качестве параметра передан не день (число, не в диапазоне от 1 от
// 7), то выводится текст “это не день недели”. Первый день понедельник,
// последний – воскресенье. Вместо if в данной задаче используйте switch.
// Пример 1:
// x=4
// результат:
// четверг
// пятница
// суббота
// воскресенье
// Пример 2:
// x=18
// результат:
// это не день недели


// Функция выводит день недели и все последующие до воскресенья
void PrintDays(int x) {
    switch (x) {
    case 1:
        std::cout << "понедельник\n";
        [[fallthrough]];
    case 2:
        std::cout << "вторник\n";
        [[fallthrough]];
    case 3:
        std::cout << "среда\n";
        [[fallthrough]];
    case 4:
        std::cout << "четверг\n";
        [[fallthrough]];
    case 5:
        std::cout << "пятница\n";
        [[fallthrough]];
    case 6:
        std::cout << "суббота\n";
        [[fallthrough]];
    case 7:
        std::cout << "воскресенье\n";
        break;
    default:
        std::cout << "это не день недели\n";
    }
}


// ЗАДАНИЕ 3 //
// 11 (2. Числа наоборот.)
// Дана сигнатура функции: String reverseListNums (int x);
// Необходимо реализовать функцию таким образом, чтобы она возвращала
// строку, в которой будут записаны все числа от x до 0 (включительно).
// Пример:
// x=5
// результат: “5 4 3 2 1 0”


// Функция возвращает строку с числами от x до 0 (включительно)
std::string ReverseListNums(int x) {
    std::string result;
    for (int i = x; i >= 0; --i) {
        result += std::to_string(i);
        if (i != 0) {
            result += " ";
        }
    }
    return result;
}



// 12 (4. Степень числа.)
// Дана сигнатура функции: int pow (int x, int y);
// Необходимо реализовать функцию таким образом, чтобы она возвращала
// результат возведения x в степень y.
// Подсказка: для получения степени необходимо умножить единицу на число x,
// и сделать это y раз, т.е. два в третьей степени это 1*2*2*2
// Пример:
// x=2
// y=5
// результат: 32


// Функция возводит x в степень y
int Pow(int x, int y) {
    int result = 1;
    for (int i = 0; i < y; ++i) {
        result *= x;
    }
    return result;
}



// 13 (6. Одинаковость.)
// Дана сигнатура функции: bool equalNum (int x);
// Необходимо реализовать функцию таким образом, чтобы она возвращала true,
// если все знаки числа одинаковы, и false в ином случае.
// Подсказки:
// intx=123%10; // х будет иметь значение 3
// intу=123/10; // у будет иметь значение 12
// Пример 1:
// x=1111
// результат: true
// Пример 2:
// x=1211
// результат: false


// Функция проверяет, одинаковы ли все цифры числа
bool EqualNum(int x) {
    int last_digit = x % 10;
    x /= 10;

    while (x != 0) {
        if (x % 10 != last_digit) {
            return false;
        }
        x /= 10;
    }
    return true;
}



// 14 (8. Левый треугольник.)
// Дана сигнатура функции: void leftTriangle (int x);
// Необходимо реализовать функцию таким образом, чтобы она выводила на
// экран треугольник из символов ‘*’ у которого х символов в высоту, а количество
// символов в ряду совпадает с номером строки.
// Пример 1:
// x=2
// результат:
// *
// **
// Пример 2:
// x=4
// результат:
// *
// **
// ***
// ****


// Функция выводит левый треугольник высотой x
void LeftTriangle(int x) {
    for (int i = 1; i <= x; ++i) {
        for (int j = 1; j <= i; ++j) {
            std::cout << "*";
        }
        std::cout << std::endl;
    }
}

// 15 (10. Угадайка.)
// Дана сигнатура функции: void guessGame()
// Необходимо реализовать функцию таким образом, чтобы она генерировала
// случайное число от 0 до 9, далее считывала с консоли введенное пользователем
// число и выводила, угадал ли пользователь то, что было загадано, или нет.
// Функция запускается до тех пор, пока пользователь не угадает число. После
// этого выведите на экран количество попыток, которое потребовалось
// пользователю, чтобы угадать число.
// Пример:
// Введите число от 0 до 9:
// 5
// Вы не угадали, введите число от 0 до 9:
// 9
// Вы угадали!
// Вы отгадали число за 2 попытки

// Функция угадайки
void GuessGame(int seed) {
    int target = (seed * 7 + 3) % 10;
    int guess;
    int attempts = 0;

    do {
        std::cout << "Введите число от 0 до 9: ";
        std::cin >> guess;
        ++attempts;

        if (guess != target) {
            std::cout << "Вы не угадали, попробуйте снова.\n";
        }
    } while (guess != target);

    std::cout << "Вы угадали!\n";
    std::cout << "Вы отгадали число за " << attempts << " попыток.\n";
}

    int main() {
    setlocale(LC_ALL, "Russian"); 

    while (true) {
        std::cout << "\nМеню:\n";
        std::cout << "1. Сумма двух последних цифр числа\n";
        std::cout << "2. Проверка: положительное ли число\n";
        std::cout << "3. Проверка: заглавная ли буква\n";
        std::cout << "4. Проверка: делит ли одно число другое\n";
        std::cout << "5. Последовательная сумма последних цифр (5 чисел)\n";
        std::cout << "6. Безопасное деление\n";
        std::cout << "7. Строка сравнения\n";
        std::cout << "8. Тройная сумма\n";
        std::cout << "9. Возраст\n";
        std::cout << "10. Дни недели\n";
        std::cout << "11. Числа наоборот\n";
        std::cout << "12. Степень числа\n";
        std::cout << "13. Одинаковость\n";
        std::cout << "14. Левый треугольник\n";
        std::cout << "15. Угадайка\n";
        std::cout << "0. Выход\n";

        int choice; 
        std::cout << "Выберите задачу: ";
        std::cin >> choice;

        switch (choice) {
        case 1: {
            int n;
            std::cout << "Введите число (> 10): ";
            std::cin >> n;
            if (n > -10 && n < 10) {
                std::cout << "Ошибка: нужно хотя бы двухзначное число.\n";
            }
            else {
                std::cout << "Сумма двух последних цифр: " << SumLastNums(n) << "\n";
            }
            break;
        }
        case 2: {
            int n;
            std::cout << "Введите число: ";
            std::cin >> n;
            std::cout << (IsPositive(n) ? "true\n" : "false\n");
            break;
        }
        case 3: {
            char c;
            std::cout << "Введите символ: ";
            std::cin >> c;
            std::cout << (IsUpperCase(c) ? "true\n" : "false\n");
            break;
        }
        case 4: {
            int a, b;
            std::cout << "Введите число a: ";
            std::cin >> a;
            std::cout << "Введите число b: ";
            std::cin >> b;
            std::cout << (IsDivisor(a, b) ? "true\n" : "false\n");
            break;
        }
        case 5: {
            int n1, n2, n3, n4, n5;
            std::cout << "Введите 1 число: ";
            std::cin >> n1;
            std::cout << "Введите 2 число: ";
            std::cin >> n2;
            int result = LastNumSum(n1, n2);
            std::cout << "Промежуточный результат: " << result << "\n";

            std::cout << "Введите 3 число: ";
            std::cin >> n3;
            result = LastNumSum(result, n3);
            std::cout << "Промежуточный результат: " << result << "\n";

            std::cout << "Введите 4 число: ";
            std::cin >> n4;
            result = LastNumSum(result, n4);
            std::cout << "Промежуточный результат: " << result << "\n";

            std::cout << "Введите 5 число: ";
            std::cin >> n5;
            result = LastNumSum(result, n5);
            std::cout << "Итоговый результат: " << result << "\n";
            break;
        }
        case 6: {
            int x, y;
            std::cout << "Введите делимое x: ";
            std::cin >> x;
            std::cout << "Введите делитель y: ";
            std::cin >> y;
            std::cout << "Результат деления: " << SafeDiv(x, y) << "\n";
            break;
        }
        case 7: {
            int a, b;
            std::cout << "Введите число a: ";
            std::cin >> a;
            std::cout << "Введите число b: ";
            std::cin >> b;
            std::cout << "Результат: " << MakeDecision(a, b) << "\n";
            break;
        }
        case 8: {
            int a, b, c;
            std::cout << "Введите число a: ";
            std::cin >> a;
            std::cout << "Введите число b: ";
            std::cin >> b;
            std::cout << "Введите число c: ";
            std::cin >> c;
            std::cout << (SumTrio(a, b, c) ? "true\n" : "false\n");
            break;
        }
        case 9: {
            int n;
            std::cout << "Введите возраст: ";
            std::cin >> n;
            std::cout << Age(n) << "\n";
            break;
        }
        case 10: {
            int day;
            std::cout << "Введите номер дня недели (1-7): ";
            std::cin >> day;
            PrintDays(day);
            break;
        }
        case 11: {
            int n;
            std::cout << "Введите число: ";
            std::cin >> n;
            std::cout << ReverseListNums(n) << "\n";
            break;
        }
        case 12: {
            int base, exp;
            std::cout << "Введите число x: ";
            std::cin >> base;
            std::cout << "Введите степень y: ";
            std::cin >> exp;
            std::cout << base << " в степени " << exp << " = " << Pow(base, exp)
                << "\n";
            break;
        }
        case 13: {
            int n;
            std::cout << "Введите число: ";
            std::cin >> n;
            std::cout << (EqualNum(n) ? "true\n" : "false\n");
            break;
        }
        case 14: {
            int n;
            std::cout << "Введите высоту треугольника: ";
            std::cin >> n;
            LeftTriangle(n);
            break;
        }
        case 15: {
            int seed;
            std::cout << "Введите любое число для генерации случайного числа: ";
            std::cin >> seed;
            GuessGame(seed);
            break;
        }
        case 0:
            std::cout << "Выход из программы.\n";
            return 0;
        default:
            std::cout << "Нет такой задачи.\n";
            break;
        }
  }
}
